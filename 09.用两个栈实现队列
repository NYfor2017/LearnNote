9.用两个栈实现队列
  题目描述： 用两个栈实现一个队列。队列的声明如下，请实现它的两个函数appendTail和deletedHead,分别完成在队列尾部插入节点和在队列头部删除节点的功能。
  要求：①判断栈中数据的合法性②如果栈中元素为空却依然执行出栈操作，应该报出异常错误。
  实现：
 public class Solution<E> {

    private Stack<E> stack1;
    private Stack<E> stack2;

    public Solution(){
      stack1 = new Stack<E>();
      stack2 = new Stack<E>();
    }

    public void appendHead(E node){
      stack1.push(node);
    }

    public E deleteHead(){
      if(stack1.isEmpty()&&stack2.isEmpty()){
        throw new RuntimeException();
      }
      while(stack2.isEmpty()){
        while(!stack1.isEmpty()){
          stack2.push(stack1.pop());
        }
      }
      return stack2.pop();
    }

    public static void main(String[] args) {
      Solution s = new Solution();
      s.appendHead(1);
      s.appendHead(2);
      s.appendHead(3);
      System.out.println(s.deleteHead());
    }
  }
 
 
 
 
 
 相关题目：用两个队列实现栈。
 要求：与以上题目类似。
 实现：
 public class Solution<E> {

    private Queue<E> queue1;
    private Queue<E> queue2;

    public Solution(){
      queue1 = new LinkedList<>();
      queue2 = new LinkedList<>();
    }

    public void appendHeads(E node){
      if(queue1.isEmpty()){
        queue2.add(node);
      }else{
        queue1.add(node);
      }
    }

    public E deleteHead(){
      if(queue1.isEmpty()&&queue2.isEmpty()){
        throw new RuntimeException();
      }
      if(queue1.isEmpty()&&!queue2.isEmpty()){
        while(!queue2.isEmpty()){
          E node = queue2.poll();
          if(queue2.isEmpty()){
            return node;
          }
          else{
            queue1.add(node);
          }
        }
      }else if(!queue1.isEmpty()&&queue2.isEmpty()){
        while(!queue1.isEmpty()){
          E node = queue1.poll();
          if(queue1.isEmpty()){
            return node;
          }
        }
      }
      throw new RuntimeException();
    }
  }
