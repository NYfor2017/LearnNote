5. 替换空格
  题目：请实现一个函数，把字符串中的每个空格替换成“%20”。例如输入“We are happy”，则输出”We%20are%20happy”。
  要求：①确定字符串的合法性②逆向思维③Java中jdk的特性。
  实现：
    解法一：使用StringBuilder的append方法。
    public class Solution{
      private StringBuilder sb;
      public StringBuilder replease(String str, String re){
        for(int i=0; i<str.length; i++){
          if(str.charAt(i) == ' '){
            sb.append(re);
          }else{
            sb.append(str.charAt(i);
          }
        }
        return sb;
      }
    }
    
    解法二：使用String的内部结构char[]进行替换，前提是char[]足够大，假设此处的char[] = new char[100]。先遍历一次找到空格的个数，然后算出替换之后的字符串长度，之后再用两个指针将字符进行移动，以及更改待替换字符。
    public class Solution{
      public char[] replease(String str, String re){
        char[] ch = str.toCharArray();
        if(ch.length == 0 || ch == null){
          return ch;
        }
        int blank = 0; //空格的总数
        for(int i=0; i<ch.length; i++){
          if(ch[i]==' ')
            blank++;
        }
        int sum = ch.length + (re.length() - 1) * blank;  //替换后字符串长度
        char[] chReplease = new char[sum];  //创建一个新的字符数组，用于存放替换后的字符串
        System.out.println(ch.length+"...."+chReplease.length);
        int p1 = ch.length - 1;  //指针，放在新字符串中原字符串的最后位置
        int p2 = sum - 1;  //指针，放在新字符串的最后位置
        while(p1>=0&&p2>=0) {
          if(ch[p1] == ' ') {
            for(int i = re.length()-1; i >= 0; i--) {
              chReplease[p2--] = re.charAt(i);
            }
            p1--;
          }else {
            chReplease[p2--] = ch[p1--];
          }
        }

        return chReplease;
      }
    }
    
    解法二中的替换过程，如果在替换字符已知的情况下，可以使用更为高效的方法：先把要替换的字符串给拆分成字符，然后再挨个替换。
